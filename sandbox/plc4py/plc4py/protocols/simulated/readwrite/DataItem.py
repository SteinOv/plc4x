#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
package simulated.readwrite;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import org.apache.plc4x.java.api.model.PlcTag;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.generation.EvaluationHelper;
import org.apache.plc4x.java.spi.generation.ParseException;
import org.apache.plc4x.java.spi.generation.SerializationException;
import org.apache.plc4x.java.spi.generation.ReadBuffer;
import org.apache.plc4x.java.spi.generation.WriteBuffer;
import org.apache.plc4x.java.spi.generation.ByteOrder;
import simulated.readwrite.*;
import org.apache.plc4x.java.spi.values.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.*;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

public class DataItem {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataItem.class);
    public static PlcValue staticParse(ReadBuffer readBuffer, str dataType, c_uint16 numberOfValues) throws ParseException {
if( EvaluationHelper.equals( dataType, "BOOL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BOOL

            // Simple Field (value)
            c_bool value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readBit("");

            return new PlcBOOL(value);
        } else if( EvaluationHelper.equals( dataType, "BOOL" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcBOOL((c_bool) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readBit("")));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "BYTE" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BYTE

            // Simple Field (value)
            c_uint8 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedShort("", 8);

            return new PlcBYTE(value);
        } else if( EvaluationHelper.equals( dataType, "BYTE" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcUINT((c_uint8) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedShort("", 8)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "WORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WORD

            // Simple Field (value)
            c_uint16 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedInt("", 16);

            return new PlcWORD(value);
        } else if( EvaluationHelper.equals( dataType, "WORD" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcUDINT((c_uint16) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedInt("", 16)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "DWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DWORD

            // Simple Field (value)
            c_uint32 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedLong("", 32);

            return new PlcDWORD(value);
        } else if( EvaluationHelper.equals( dataType, "DWORD" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcULINT((c_uint32) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedLong("", 32)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "LWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LWORD

            // Simple Field (value)
            c_uint64 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedBigInteger("", 64);

            return new PlcLWORD(value);
        } else if( EvaluationHelper.equals( dataType, "LWORD" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcLINT((c_uint64) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedBigInteger("", 64)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "SINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // SINT

            // Simple Field (value)
            c_int8 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readSignedByte("", 8);

            return new PlcSINT(value);
        } else if( EvaluationHelper.equals( dataType, "SINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcSINT((c_int8) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readSignedByte("", 8)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "INT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // INT

            // Simple Field (value)
            c_int16 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readShort("", 16);

            return new PlcINT(value);
        } else if( EvaluationHelper.equals( dataType, "INT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcINT((c_int16) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readShort("", 16)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "DINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DINT

            // Simple Field (value)
            c_int32 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readInt("", 32);

            return new PlcDINT(value);
        } else if( EvaluationHelper.equals( dataType, "DINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcDINT((c_int32) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readInt("", 32)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "LINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LINT

            // Simple Field (value)
            c_int64 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readLong("", 64);

            return new PlcLINT(value);
        } else if( EvaluationHelper.equals( dataType, "LINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcLINT((c_int64) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readLong("", 64)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "USINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // USINT

            // Simple Field (value)
            c_uint8 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedShort("", 8);

            return new PlcUSINT(value);
        } else if( EvaluationHelper.equals( dataType, "USINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcUINT((c_uint8) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedShort("", 8)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "UINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UINT

            // Simple Field (value)
            c_uint16 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedInt("", 16);

            return new PlcUINT(value);
        } else if( EvaluationHelper.equals( dataType, "UINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcUDINT((c_uint16) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedInt("", 16)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "UDINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UDINT

            // Simple Field (value)
            c_uint32 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedLong("", 32);

            return new PlcUDINT(value);
        } else if( EvaluationHelper.equals( dataType, "UDINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcULINT((c_uint32) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedLong("", 32)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "ULINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // ULINT

            // Simple Field (value)
            c_uint64 value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedBigInteger("", 64);

            return new PlcULINT(value);
        } else if( EvaluationHelper.equals( dataType, "ULINT" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcLINT((c_uint64) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readUnsignedBigInteger("", 64)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "REAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // REAL

            // Simple Field (value)
            c_float value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readFloat("", 32);

            return new PlcREAL(value);
        } else if( EvaluationHelper.equals( dataType, "REAL" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcREAL((c_float) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readFloat("", 32)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "LREAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LREAL

            // Simple Field (value)
            c_double value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readDouble("", 64);

            return new PlcLREAL(value);
        } else if( EvaluationHelper.equals( dataType, "LREAL" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcLREAL((c_double) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readDouble("", 64)));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "CHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // CHAR

            // Simple Field (value)
            str value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 8, "UTF-8");

            return new PlcCHAR(value);
        } else if( EvaluationHelper.equals( dataType, "CHAR" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcSTRING((str) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 8, "UTF-8")));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WCHAR

            // Simple Field (value)
            str value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 16, "UTF-16");

            return new PlcWCHAR(value);
        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) ) { // List
            // Array field (value)
            // Count array
            if(numberOfValues > Integer.MAX_VALUE) {
                throw new ParseException("Array count of " + (numberOfValues) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
            }
            List<PlcValue> value;
            {
                int itemCount = (int) numberOfValues;
                value = new LinkedList<>();
                for(int curItem = 0; curItem < itemCount; curItem++) {
                    value.add(new PlcSTRING((str) /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 16, "UTF-16")));
                }
            }

            return new PlcList(value);
        } else if( EvaluationHelper.equals( dataType, "STRING" ) ) { // STRING

            // Simple Field (value)
            str value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 255, "UTF-8");

            return new PlcSTRING(value);
        } else if( EvaluationHelper.equals( dataType, "WSTRING" ) ) { // STRING

            // Simple Field (value)
            str value = /*TODO: migrate me*//*TODO: migrate me*/readBuffer.readString("", 255, "UTF-16");

            return new PlcSTRING(value);
        }
        return null;
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PlcValue _value, str dataType, c_uint16 numberOfValues) throws SerializationException {
        staticSerialize(writeBuffer, _value, dataType, numberOfValues, ByteOrder.BIG_ENDIAN);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PlcValue _value, str dataType, c_uint16 numberOfValues, ByteOrder byteOrder) throws SerializationException {
if( EvaluationHelper.equals( dataType, "BOOL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BOOL
            // Simple Field (value)
            c_bool value = (c_bool) _value.getC_bool();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeBit("", (boolean) (value));
        } else if( EvaluationHelper.equals( dataType, "BOOL" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_bool value = (c_bool) val.getC_bool();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeBit("", (boolean) (value));
            }

        } else if( EvaluationHelper.equals( dataType, "BYTE" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BYTE
            // Simple Field (value)
            c_uint8 value = (c_uint8) _value.getC_uint8();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
        } else if( EvaluationHelper.equals( dataType, "BYTE" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint8 value = (c_uint8) val.getC_uint8();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
            }

        } else if( EvaluationHelper.equals( dataType, "WORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WORD
            // Simple Field (value)
            c_uint16 value = (c_uint16) _value.getC_uint16();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
        } else if( EvaluationHelper.equals( dataType, "WORD" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint16 value = (c_uint16) val.getC_uint16();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
            }

        } else if( EvaluationHelper.equals( dataType, "DWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DWORD
            // Simple Field (value)
            c_uint32 value = (c_uint32) _value.getC_uint32();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
        } else if( EvaluationHelper.equals( dataType, "DWORD" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint32 value = (c_uint32) val.getC_uint32();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            }

        } else if( EvaluationHelper.equals( dataType, "LWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LWORD
            // Simple Field (value)
            c_uint64 value = (c_uint64) _value.getC_uint64();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
        } else if( EvaluationHelper.equals( dataType, "LWORD" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint64 value = (c_uint64) val.getC_uint64();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
            }

        } else if( EvaluationHelper.equals( dataType, "SINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // SINT
            // Simple Field (value)
            c_int8 value = (c_int8) _value.getC_int8();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeSignedByte("", 8, ((Number) (value)).byteValue());
        } else if( EvaluationHelper.equals( dataType, "SINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_int8 value = (c_int8) val.getC_int8();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeSignedByte("", 8, ((Number) (value)).byteValue());
            }

        } else if( EvaluationHelper.equals( dataType, "INT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // INT
            // Simple Field (value)
            c_int16 value = (c_int16) _value.getC_int16();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeShort("", 16, ((Number) (value)).shortValue());
        } else if( EvaluationHelper.equals( dataType, "INT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_int16 value = (c_int16) val.getC_int16();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeShort("", 16, ((Number) (value)).shortValue());
            }

        } else if( EvaluationHelper.equals( dataType, "DINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DINT
            // Simple Field (value)
            c_int32 value = (c_int32) _value.getC_int32();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeInt("", 32, ((Number) (value)).intValue());
        } else if( EvaluationHelper.equals( dataType, "DINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_int32 value = (c_int32) val.getC_int32();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeInt("", 32, ((Number) (value)).intValue());
            }

        } else if( EvaluationHelper.equals( dataType, "LINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LINT
            // Simple Field (value)
            c_int64 value = (c_int64) _value.getC_int64();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeLong("", 64, ((Number) (value)).longValue());
        } else if( EvaluationHelper.equals( dataType, "LINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_int64 value = (c_int64) val.getC_int64();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeLong("", 64, ((Number) (value)).longValue());
            }

        } else if( EvaluationHelper.equals( dataType, "USINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // USINT
            // Simple Field (value)
            c_uint8 value = (c_uint8) _value.getC_uint8();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
        } else if( EvaluationHelper.equals( dataType, "USINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint8 value = (c_uint8) val.getC_uint8();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedShort("", 8, ((Number) (value)).shortValue());
            }

        } else if( EvaluationHelper.equals( dataType, "UINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UINT
            // Simple Field (value)
            c_uint16 value = (c_uint16) _value.getC_uint16();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
        } else if( EvaluationHelper.equals( dataType, "UINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint16 value = (c_uint16) val.getC_uint16();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedInt("", 16, ((Number) (value)).intValue());
            }

        } else if( EvaluationHelper.equals( dataType, "UDINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UDINT
            // Simple Field (value)
            c_uint32 value = (c_uint32) _value.getC_uint32();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
        } else if( EvaluationHelper.equals( dataType, "UDINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint32 value = (c_uint32) val.getC_uint32();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedLong("", 32, ((Number) (value)).longValue());
            }

        } else if( EvaluationHelper.equals( dataType, "ULINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // ULINT
            // Simple Field (value)
            c_uint64 value = (c_uint64) _value.getC_uint64();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
        } else if( EvaluationHelper.equals( dataType, "ULINT" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_uint64 value = (c_uint64) val.getC_uint64();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeUnsignedBigInteger("", 64, (BigInteger) (value));
            }

        } else if( EvaluationHelper.equals( dataType, "REAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // REAL
            // Simple Field (value)
            c_float value = (c_float) _value.getC_float();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeFloat("", 32,(value));
        } else if( EvaluationHelper.equals( dataType, "REAL" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_float value = (c_float) val.getC_float();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeFloat("", 32,(value));
            }

        } else if( EvaluationHelper.equals( dataType, "LREAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LREAL
            // Simple Field (value)
            c_double value = (c_double) _value.getC_double();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeDouble("", 64,(value));
        } else if( EvaluationHelper.equals( dataType, "LREAL" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                c_double value = (c_double) val.getC_double();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeDouble("", 64,(value));
            }

        } else if( EvaluationHelper.equals( dataType, "CHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // CHAR
            // Simple Field (value)
            str value = (str) _value.getStr();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 8, "UTF-8", (String) (value));
        } else if( EvaluationHelper.equals( dataType, "CHAR" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                str value = (str) val.getStr();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 8, "UTF-8", (String) (value));
            }

        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WCHAR
            // Simple Field (value)
            str value = (str) _value.getStr();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 16, "UTF-16", (String) (value));
        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) ) { // List
            PlcList values = (PlcList) _value;

            for (PlcValue val : ((List<PlcValue>) values.getList())) {
                str value = (str) val.getStr();
                /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 16, "UTF-16", (String) (value));
            }

        } else if( EvaluationHelper.equals( dataType, "STRING" ) ) { // STRING
            // Simple Field (value)
            str value = (str) _value.getStr();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 255, "UTF-8", (String) (value));
        } else if( EvaluationHelper.equals( dataType, "WSTRING" ) ) { // STRING
            // Simple Field (value)
            str value = (str) _value.getStr();
            /*TODO: migrate me*//*TODO: migrate me*/writeBuffer.writeString("", 255, "UTF-16", (String) (value));
        }
    }

    public static int getLengthInBytes(PlcValue _value, str dataType, c_uint16 numberOfValues) {
        return (int) Math.ceil((float) getLengthInBits(_value, dataType, numberOfValues) / 8.0);
    }

    public static int getLengthInBits(PlcValue _value, str dataType, c_uint16 numberOfValues) {
        int sizeInBits = 0;
if( EvaluationHelper.equals( dataType, "BOOL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BOOL
                // Simple Field (value)
                sizeInBits += 1;
        } else if( EvaluationHelper.equals( dataType, "BOOL" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 1;
        } else if( EvaluationHelper.equals( dataType, "BYTE" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // BYTE
                // Simple Field (value)
                sizeInBits += 8;
        } else if( EvaluationHelper.equals( dataType, "BYTE" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 8;
        } else if( EvaluationHelper.equals( dataType, "WORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WORD
                // Simple Field (value)
                sizeInBits += 16;
        } else if( EvaluationHelper.equals( dataType, "WORD" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 16;
        } else if( EvaluationHelper.equals( dataType, "DWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DWORD
                // Simple Field (value)
                sizeInBits += 32;
        } else if( EvaluationHelper.equals( dataType, "DWORD" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 32;
        } else if( EvaluationHelper.equals( dataType, "LWORD" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LWORD
                // Simple Field (value)
                sizeInBits += 64;
        } else if( EvaluationHelper.equals( dataType, "LWORD" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 64;
        } else if( EvaluationHelper.equals( dataType, "SINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // SINT
                // Simple Field (value)
                sizeInBits += 8;
        } else if( EvaluationHelper.equals( dataType, "SINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 8;
        } else if( EvaluationHelper.equals( dataType, "INT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // INT
                // Simple Field (value)
                sizeInBits += 16;
        } else if( EvaluationHelper.equals( dataType, "INT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 16;
        } else if( EvaluationHelper.equals( dataType, "DINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // DINT
                // Simple Field (value)
                sizeInBits += 32;
        } else if( EvaluationHelper.equals( dataType, "DINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 32;
        } else if( EvaluationHelper.equals( dataType, "LINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LINT
                // Simple Field (value)
                sizeInBits += 64;
        } else if( EvaluationHelper.equals( dataType, "LINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 64;
        } else if( EvaluationHelper.equals( dataType, "USINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // USINT
                // Simple Field (value)
                sizeInBits += 8;
        } else if( EvaluationHelper.equals( dataType, "USINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 8;
        } else if( EvaluationHelper.equals( dataType, "UINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UINT
                // Simple Field (value)
                sizeInBits += 16;
        } else if( EvaluationHelper.equals( dataType, "UINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 16;
        } else if( EvaluationHelper.equals( dataType, "UDINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // UDINT
                // Simple Field (value)
                sizeInBits += 32;
        } else if( EvaluationHelper.equals( dataType, "UDINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 32;
        } else if( EvaluationHelper.equals( dataType, "ULINT" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // ULINT
                // Simple Field (value)
                sizeInBits += 64;
        } else if( EvaluationHelper.equals( dataType, "ULINT" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 64;
        } else if( EvaluationHelper.equals( dataType, "REAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // REAL
                // Simple Field (value)
                sizeInBits += 32;
        } else if( EvaluationHelper.equals( dataType, "REAL" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 32;
        } else if( EvaluationHelper.equals( dataType, "LREAL" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // LREAL
                // Simple Field (value)
                sizeInBits += 64;
        } else if( EvaluationHelper.equals( dataType, "LREAL" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 64;
        } else if( EvaluationHelper.equals( dataType, "CHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // CHAR
                // Simple Field (value)
                sizeInBits += 8;
        } else if( EvaluationHelper.equals( dataType, "CHAR" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 8;
        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) && EvaluationHelper.equals( numberOfValues, 1 ) ) { // WCHAR
                // Simple Field (value)
                sizeInBits += 16;
        } else if( EvaluationHelper.equals( dataType, "WCHAR" ) ) { // List
                PlcList values = (PlcList) _value;
                sizeInBits += values.getList().size() * 16;
        } else if( EvaluationHelper.equals( dataType, "STRING" ) ) { // STRING
                // Simple Field (value)
                sizeInBits += 255;
        } else if( EvaluationHelper.equals( dataType, "WSTRING" ) ) { // STRING
                // Simple Field (value)
                sizeInBits += 255;
        }
        return sizeInBits;
    }

}
