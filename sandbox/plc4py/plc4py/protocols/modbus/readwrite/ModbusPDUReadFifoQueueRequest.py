#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUReadFifoQueueRequest(PlcMessage,ModbusPDU):
            fifoPointerAddress: int

    # Accessors for discriminator values.
    def Boolean getErrorFlag() {
        return (boolean) false
    }
    def Short getFunctionFlag() {
        return (short) 0x18
    }
    def Boolean getResponse() {
        return (boolean) false
    }


    def __post_init__(self):
super().__init__( )



    def getFifoPointerAddress(self) -> int:
        return fifoPointerAddress


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUReadFifoQueueRequest")

                        # Simple Field (fifoPointerAddress)
                            writeSimpleField("fifoPointerAddress", fifoPointerAddress, writeUnsignedInt(writeBuffer, 16))

            writeBuffer.popContext("ModbusPDUReadFifoQueueRequest")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUReadFifoQueueRequest = self

        # Simple field (fifoPointerAddress)
        lengthInBits += 16

        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, Boolean response) -> ModbusPDUReadFifoQueueRequestBuilder:
        readBuffer.pullContext("ModbusPDUReadFifoQueueRequest")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                fifoPointerAddress: int = readSimpleField("fifoPointerAddress", readUnsignedInt(readBuffer, 16))

    readBuffer.closeContext("ModbusPDUReadFifoQueueRequest")
    # Create the instance
        return ModbusPDUReadFifoQueueRequestBuilder(
            fifoPointerAddress
        
        )

        class ModbusPDUReadFifoQueueRequestBuilder(ModbusPDUModbusPDUBuilder {
        fifoPointerAddress: int

        def ModbusPDUReadFifoQueueRequestBuilder(
            int fifoPointerAddress
        
        ):
            self.fifoPointerAddress = fifoPointerAddress


        def build(
        ) -> ModbusPDUReadFifoQueueRequest:
            modbusPDUReadFifoQueueRequest: ModbusPDUReadFifoQueueRequest = ModbusPDUReadFifoQueueRequest(
                fifoPointerAddress
)
            return modbusPDUReadFifoQueueRequest


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUReadFifoQueueRequest):
            return False

        that: ModbusPDUReadFifoQueueRequest = ModbusPDUReadFifoQueueRequest(o)
        return
            (getFifoPointerAddress() == that.getFifoPointerAddress()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getFifoPointerAddress()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"

