#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_bool
from ctypes import c_byte
from ctypes import c_uint16
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
from typing import List
import math


@dataclass
class ModbusPDUGetComEventLogResponse(PlcMessage, ModbusPDU):
    status: c_uint16
    eventCount: c_uint16
    messageCount: c_uint16
    events: List[c_byte]

    # Accessors for discriminator values.
    def getErrorFlag(self) -> c_bool:
        return c_bool(False)

    def getFunctionFlag(self) -> c_uint8:
        return c_uint8(0x0C)

    def getResponse(self) -> c_bool:
        return c_bool(True)

    def __post_init__(self):
        super().__init__()

    def getStatus(self) -> c_uint16:
        return self.status

    def getEventCount(self) -> c_uint16:
        return self.eventCount

    def getMessageCount(self) -> c_uint16:
        return self.messageCount

    def getEvents(self) -> List[c_byte]:
        return self.events

    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUGetComEventLogResponse")

        # Implicit Field (byteCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
        byteCount: c_uint8 = c_uint8(((COUNT(self.getEvents())) + (6)))
        writeImplicitField("byteCount", byteCount, writeUnsignedShort(writeBuffer, 8))

        # Simple Field (status)
        writeSimpleField("status", status, writeUnsignedInt(writeBuffer, 16))

        # Simple Field (eventCount)
        writeSimpleField("eventCount", eventCount, writeUnsignedInt(writeBuffer, 16))

        # Simple Field (messageCount)
        writeSimpleField(
            "messageCount", messageCount, writeUnsignedInt(writeBuffer, 16)
        )

        # Array Field (events)
        writeByteArrayField("events", events, writeByteArray(writeBuffer, 8))

        writeBuffer.popContext("ModbusPDUGetComEventLogResponse")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUGetComEventLogResponse = self

        # Implicit Field (byteCount)
        lengthInBits += 8

        # Simple field (status)
        lengthInBits += 16

        # Simple field (eventCount)
        lengthInBits += 16

        # Simple field (messageCount)
        lengthInBits += 16

        # Array field
        if self.events is not None:
            lengthInBits += 8 * self.events.length

        return lengthInBits

    @staticmethod
    def staticParseBuilder(
        readBuffer: ReadBuffer, response: c_bool
    ) -> ModbusPDUGetComEventLogResponseBuilder:
        readBuffer.pullContext("ModbusPDUGetComEventLogResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        byteCount: c_uint8 = readImplicitField(
            "byteCount", readUnsignedShort(readBuffer, 8)
        )

        status: c_uint16 = readSimpleField("status", readUnsignedInt(readBuffer, 16))

        eventCount: c_uint16 = readSimpleField(
            "eventCount", readUnsignedInt(readBuffer, 16)
        )

        messageCount: c_uint16 = readSimpleField(
            "messageCount", readUnsignedInt(readBuffer, 16)
        )

        events: List[byte] = readBuffer.readByteArray("events", int((byteCount) - (6)))

        readBuffer.closeContext("ModbusPDUGetComEventLogResponse")
        # Create the instance
        return ModbusPDUGetComEventLogResponseBuilder(
            status, eventCount, messageCount, events
        )

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUGetComEventLogResponse):
            return False

        that: ModbusPDUGetComEventLogResponse = ModbusPDUGetComEventLogResponse(o)
        return (
            (self.getStatus() == that.getStatus())
            and (self.getEventCount() == that.getEventCount())
            and (self.getMessageCount() == that.getMessageCount())
            and (self.getEvents() == that.getEvents())
            and super().equals(that)
            and True
        )

    def hashCode(self) -> int:
        return hash(
            super().hashCode(),
            self.getStatus(),
            self.getEventCount(),
            self.getMessageCount(),
            self.getEvents(),
        )

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


@dataclass
class ModbusPDUGetComEventLogResponseBuilder(ModbusPDUModbusPDUBuilder):
    status: c_uint16
    eventCount: c_uint16
    messageCount: c_uint16
    events: List[c_byte]

    def __post_init__(self):
        pass

    def build(
        self,
    ) -> ModbusPDUGetComEventLogResponse:
        modbusPDUGetComEventLogResponse: ModbusPDUGetComEventLogResponse = (
            ModbusPDUGetComEventLogResponse(
                self.status, self.eventCount, self.messageCount, self.events
            )
        )
        return modbusPDUGetComEventLogResponse
