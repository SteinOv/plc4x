#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUReadFileRecordResponseItem(PlcMessage):
            referenceType: c_uint8
            data: []c_byte



    def __post_init__(self):
super().__init__( )



    def getReferenceType(self) -> c_uint8:
        return referenceType

    def getData(self) -> []c_byte:
        return data


    def serialize(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUReadFileRecordResponseItem")

                        # Implicit Field (dataLength) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
                        c_uint8 dataLength = (c_uint8) ((COUNT(getData())) + (1))
                        writeImplicitField("dataLength", dataLength, writeUnsignedShort(writeBuffer, 8))

                        # Simple Field (referenceType)
                            writeSimpleField("referenceType", referenceType, writeUnsignedShort(writeBuffer, 8))

                        # Array Field (data)
                        writeByteArrayField("data", data, writeByteArray(writeBuffer, 8))

            writeBuffer.popContext("ModbusPDUReadFileRecordResponseItem")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = 0
        _value: ModbusPDUReadFileRecordResponseItem = self

        # Implicit Field (dataLength)
        lengthInBits += 8

        # Simple field (referenceType)
        lengthInBits += 8

        # Array field
        if data is not None):
            lengthInBits += 8 * data.length


        return lengthInBits


    def staticParse(readBuffer: ReadBuffer , args) -> ModbusPDUReadFileRecordResponseItem:
        positionAware: PositionAware = readBuffer
        return staticParse(readBuffer)
    }

    def  staticParse(readBuffer: ReadBuffer) -> ModbusPDUReadFileRecordResponseItem:
        readBuffer.pullContext("ModbusPDUReadFileRecordResponseItem")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                dataLength: c_uint8 = readImplicitField("dataLength", readUnsignedShort(readBuffer, 8))

                referenceType: c_uint8 = readSimpleField("referenceType", readUnsignedShort(readBuffer, 8))

                    data: byte[] = readBuffer.readByteArray("data", Math.toIntExact((dataLength) - (1)))

    readBuffer.closeContext("ModbusPDUReadFileRecordResponseItem")
    # Create the instance
        _modbusPDUReadFileRecordResponseItem: ModbusPDUReadFileRecordResponseItem = ModbusPDUReadFileRecordResponseItem(
            referenceType, 
            data
        )
        return _modbusPDUReadFileRecordResponseItem


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUReadFileRecordResponseItem):
            return False

        that: ModbusPDUReadFileRecordResponseItem = ModbusPDUReadFileRecordResponseItem(o)
        return
            (getReferenceType() == that.getReferenceType()) &&
            (getData() == that.getData()) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            getReferenceType(),
            getData()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"



