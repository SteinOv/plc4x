#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_byte
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
from typing import List
import math


@dataclass
class ModbusPDUReadFileRecordResponseItem(PlcMessage):
    referenceType: c_uint8
    data: List[c_byte]

    def __post_init__(self):
        super().__init__()

    def getReferenceType(self) -> c_uint8:
        return self.referenceType

    def getData(self) -> List[c_byte]:
        return self.data

    def serialize(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUReadFileRecordResponseItem")

        # Implicit Field (dataLength) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
        dataLength: c_uint8 = c_uint8(((COUNT(self.getData())) + (1)))
        writeImplicitField("dataLength", dataLength, writeUnsignedShort(writeBuffer, 8))

        # Simple Field (referenceType)
        writeSimpleField(
            "referenceType", referenceType, writeUnsignedShort(writeBuffer, 8)
        )

        # Array Field (data)
        writeByteArrayField("data", data, writeByteArray(writeBuffer, 8))

        writeBuffer.popContext("ModbusPDUReadFileRecordResponseItem")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = 0
        _value: ModbusPDUReadFileRecordResponseItem = self

        # Implicit Field (dataLength)
        lengthInBits += 8

        # Simple field (referenceType)
        lengthInBits += 8

        # Array field
        if self.data is not None:
            lengthInBits += 8 * self.data.length

        return lengthInBits

    def staticParse(
        readBuffer: ReadBuffer, args
    ) -> ModbusPDUReadFileRecordResponseItem:
        positionAware: PositionAware = readBuffer
        return staticParse(readBuffer)

    @staticmethod
    def staticParseContext(
        readBuffer: ReadBuffer,
    ) -> ModbusPDUReadFileRecordResponseItem:
        readBuffer.pullContext("ModbusPDUReadFileRecordResponseItem")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        dataLength: c_uint8 = readImplicitField(
            "dataLength", readUnsignedShort(readBuffer, 8)
        )

        referenceType: c_uint8 = readSimpleField(
            "referenceType", readUnsignedShort(readBuffer, 8)
        )

        data: List[byte] = readBuffer.readByteArray("data", int((dataLength) - (1)))

        readBuffer.closeContext("ModbusPDUReadFileRecordResponseItem")
        # Create the instance
        _modbusPDUReadFileRecordResponseItem: ModbusPDUReadFileRecordResponseItem = (
            ModbusPDUReadFileRecordResponseItem(referenceType, data)
        )
        return _modbusPDUReadFileRecordResponseItem

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUReadFileRecordResponseItem):
            return False

        that: ModbusPDUReadFileRecordResponseItem = ModbusPDUReadFileRecordResponseItem(
            o
        )
        return (
            (self.getReferenceType() == that.getReferenceType())
            and (self.getData() == that.getData())
            and True
        )

    def hashCode(self) -> int:
        return hash(self.getReferenceType(), self.getData())

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"
