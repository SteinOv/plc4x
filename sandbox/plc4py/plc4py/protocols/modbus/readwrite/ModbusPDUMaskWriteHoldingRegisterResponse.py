#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_bool
from ctypes import c_uint16
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
import math

    
@dataclass
class ModbusPDUMaskWriteHoldingRegisterResponse(PlcMessage,ModbusPDU):
    referenceAddress: c_uint16
    andMask: c_uint16
    orMask: c_uint16

    # Accessors for discriminator values.
    def c_bool getErrorFlag() {
        return (c_bool) false
    def c_uint8 getFunctionFlag() {
        return (c_uint8) 0x16
    def c_bool getResponse() {
        return (c_bool) true


    def __post_init__(self):
        super().__init__( )



    def getReferenceAddress(self) -> c_uint16:
        return referenceAddress

    def getAndMask(self) -> c_uint16:
        return andMask

    def getOrMask(self) -> c_uint16:
        return orMask


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUMaskWriteHoldingRegisterResponse")

        # Simple Field (referenceAddress)
        writeSimpleField("referenceAddress", referenceAddress, writeUnsignedInt(writeBuffer, 16))

        # Simple Field (andMask)
        writeSimpleField("andMask", andMask, writeUnsignedInt(writeBuffer, 16))

        # Simple Field (orMask)
        writeSimpleField("orMask", orMask, writeUnsignedInt(writeBuffer, 16))

        writeBuffer.popContext("ModbusPDUMaskWriteHoldingRegisterResponse")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUMaskWriteHoldingRegisterResponse = self

        # Simple field (referenceAddress)
        lengthInBits += 16

        # Simple field (andMask)
        lengthInBits += 16

        # Simple field (orMask)
        lengthInBits += 16

        return lengthInBits


    @staticmethod
    def staticParseBuilder(readBuffer: ReadBuffer, response: c_bool) -> ModbusPDUMaskWriteHoldingRegisterResponseBuilder:
        readBuffer.pullContext("ModbusPDUMaskWriteHoldingRegisterResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        referenceAddress: c_uint16 = readSimpleField("referenceAddress", readUnsignedInt(readBuffer, 16))

        andMask: c_uint16 = readSimpleField("andMask", readUnsignedInt(readBuffer, 16))

        orMask: c_uint16 = readSimpleField("orMask", readUnsignedInt(readBuffer, 16))

        readBuffer.closeContext("ModbusPDUMaskWriteHoldingRegisterResponse")
        # Create the instance
        return ModbusPDUMaskWriteHoldingRegisterResponseBuilder(referenceAddress, andMask, orMask )


    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUMaskWriteHoldingRegisterResponse):
            return False

        that: ModbusPDUMaskWriteHoldingRegisterResponse = ModbusPDUMaskWriteHoldingRegisterResponse(o)
        return (getReferenceAddress() == that.getReferenceAddress()) && (getAndMask() == that.getAndMask()) && (getOrMask() == that.getOrMask()) && super().equals(that) && True

    def hashCode(self) -> int:
        return hash(super().hashCode(), getReferenceAddress(), getAndMask(), getOrMask() )

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


class ModbusPDUMaskWriteHoldingRegisterResponseBuilder(ModbusPDUModbusPDUBuilder: referenceAddress: c_uint16 andMask: c_uint16 orMask: c_uint16def ModbusPDUMaskWriteHoldingRegisterResponseBuilder( c_uint16 referenceAddress, c_uint16 andMask, c_uint16 orMask ):        self.referenceAddress = referenceAddress
        self.andMask = andMask
        self.orMask = orMask


        def build(
        ) -> ModbusPDUMaskWriteHoldingRegisterResponse:
        modbusPDUMaskWriteHoldingRegisterResponse: ModbusPDUMaskWriteHoldingRegisterResponse = ModbusPDUMaskWriteHoldingRegisterResponse(
            referenceAddress, 
            andMask, 
            orMask
)
        return modbusPDUMaskWriteHoldingRegisterResponse



