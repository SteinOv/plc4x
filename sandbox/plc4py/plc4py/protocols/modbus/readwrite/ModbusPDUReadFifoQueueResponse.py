#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUReadFifoQueueResponse(PlcMessage,ModbusPDU):
            fifoValue: List<Integer>

    # Accessors for discriminator values.
    def Boolean getErrorFlag() {
        return (boolean) false
    }
    def Short getFunctionFlag() {
        return (short) 0x18
    }
    def Boolean getResponse() {
        return (boolean) true
    }


    def __post_init__(self):
super().__init__( )



    def getFifoValue(self) -> List<Integer>:
        return fifoValue


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUReadFifoQueueResponse")

                        # Implicit Field (byteCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
                        int byteCount = (int) ((((COUNT(getFifoValue())) * (2))) + (2))
                        writeImplicitField("byteCount", byteCount, writeUnsignedInt(writeBuffer, 16))

                        # Implicit Field (fifoCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
                        int fifoCount = (int) ((((COUNT(getFifoValue())) * (2))) / (2))
                        writeImplicitField("fifoCount", fifoCount, writeUnsignedInt(writeBuffer, 16))

                        # Array Field (fifoValue)
                        writeSimpleTypeArrayField("fifoValue", fifoValue, writeUnsignedInt(writeBuffer, 16))

            writeBuffer.popContext("ModbusPDUReadFifoQueueResponse")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUReadFifoQueueResponse = self

        # Implicit Field (byteCount)
        lengthInBits += 16

        # Implicit Field (fifoCount)
        lengthInBits += 16

        # Array field
        if fifoValue is not None):
            lengthInBits += 16 * fifoValue.size()


        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, Boolean response) -> ModbusPDUReadFifoQueueResponseBuilder:
        readBuffer.pullContext("ModbusPDUReadFifoQueueResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                byteCount: int = readImplicitField("byteCount", readUnsignedInt(readBuffer, 16))

                fifoCount: int = readImplicitField("fifoCount", readUnsignedInt(readBuffer, 16))

                        fifoValue: List<Integer> = readCountArrayField("fifoValue", readUnsignedInt(readBuffer, 16), fifoCount)

    readBuffer.closeContext("ModbusPDUReadFifoQueueResponse")
    # Create the instance
        return ModbusPDUReadFifoQueueResponseBuilder(
            fifoValue
        
        )

        class ModbusPDUReadFifoQueueResponseBuilder(ModbusPDUModbusPDUBuilder {
        fifoValue: List<Integer>

        def ModbusPDUReadFifoQueueResponseBuilder(
            List<Integer> fifoValue
        
        ):
            self.fifoValue = fifoValue


        def build(
        ) -> ModbusPDUReadFifoQueueResponse:
            modbusPDUReadFifoQueueResponse: ModbusPDUReadFifoQueueResponse = ModbusPDUReadFifoQueueResponse(
                fifoValue
)
            return modbusPDUReadFifoQueueResponse


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUReadFifoQueueResponse):
            return False

        that: ModbusPDUReadFifoQueueResponse = ModbusPDUReadFifoQueueResponse(o)
        return
            (getFifoValue() == that.getFifoValue()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getFifoValue()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"

