#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_bool
from ctypes import c_uint16
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
from typing import List
import math


@dataclass
class ModbusPDUReadFifoQueueResponse(PlcMessage, ModbusPDU):
    fifoValue: List[c_uint16]

    # Accessors for discriminator values.
    def getErrorFlag(self) -> c_bool:
        return c_bool(False)

    def getFunctionFlag(self) -> c_uint8:
        return c_uint8(0x18)

    def getResponse(self) -> c_bool:
        return c_bool(True)

    def __post_init__(self):
        super().__init__()

    def getFifoValue(self) -> List[c_uint16]:
        return self.fifoValue

    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUReadFifoQueueResponse")

        # Implicit Field (byteCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
        byteCount: c_uint16 = c_uint16(((((COUNT(self.getFifoValue())) * (2))) + (2)))
        writeImplicitField("byteCount", byteCount, writeUnsignedInt(writeBuffer, 16))

        # Implicit Field (fifoCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
        fifoCount: c_uint16 = c_uint16(((((COUNT(self.getFifoValue())) * (2))) / (2)))
        writeImplicitField("fifoCount", fifoCount, writeUnsignedInt(writeBuffer, 16))

        # Array Field (fifoValue)
        writeSimpleTypeArrayField(
            "fifoValue", fifoValue, writeUnsignedInt(writeBuffer, 16)
        )

        writeBuffer.popContext("ModbusPDUReadFifoQueueResponse")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUReadFifoQueueResponse = self

        # Implicit Field (byteCount)
        lengthInBits += 16

        # Implicit Field (fifoCount)
        lengthInBits += 16

        # Array field
        if self.fifoValue is not None:
            lengthInBits += 16 * self.fifoValue.size()

        return lengthInBits

    @staticmethod
    def staticParseBuilder(
        readBuffer: ReadBuffer, response: c_bool
    ) -> ModbusPDUReadFifoQueueResponseBuilder:
        readBuffer.pullContext("ModbusPDUReadFifoQueueResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        byteCount: c_uint16 = readImplicitField(
            "byteCount", readUnsignedInt(readBuffer, 16)
        )

        fifoCount: c_uint16 = readImplicitField(
            "fifoCount", readUnsignedInt(readBuffer, 16)
        )

        fifoValue: List[c_uint16] = readCountArrayField(
            "fifoValue", readUnsignedInt(readBuffer, 16), fifoCount
        )

        readBuffer.closeContext("ModbusPDUReadFifoQueueResponse")
        # Create the instance
        return ModbusPDUReadFifoQueueResponseBuilder(fifoValue)

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUReadFifoQueueResponse):
            return False

        that: ModbusPDUReadFifoQueueResponse = ModbusPDUReadFifoQueueResponse(o)
        return (
            (self.getFifoValue() == that.getFifoValue())
            and super().equals(that)
            and True
        )

    def hashCode(self) -> int:
        return hash(super().hashCode(), self.getFifoValue())

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


@dataclass
class ModbusPDUReadFifoQueueResponseBuilder(ModbusPDUModbusPDUBuilder):
    fifoValue: List[c_uint16]

    def __post_init__(self):
        pass

    def build(
        self,
    ) -> ModbusPDUReadFifoQueueResponse:
        modbusPDUReadFifoQueueResponse: ModbusPDUReadFifoQueueResponse = (
            ModbusPDUReadFifoQueueResponse(self.fifoValue)
        )
        return modbusPDUReadFifoQueueResponse
