#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_bool
from plc4py.api.messages.PlcMessage import PlcMessage
from plc4py.protocols.modbus.readwrite.DriverType import DriverType
import math


@dataclass
class ModbusADU(ABC, PlcMessage):
    # Arguments.
    response: c_bool

    def __post_init__(self):
        super().__init__()

    # Abstract accessors for discriminator values.
    @abstractmethod
    def getDriverType(self) -> DriverType:
        pass

    @abstractmethod
    def serializeModbusADUChild(writeBuffer: WriteBuffer) -> None:
        pass

    def serialize(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusADU")

        # Switch field (Serialize the sub-type)
        self.serializeModbusADUChild(writeBuffer)

        writeBuffer.popContext("ModbusADU")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = 0
        _value: ModbusADU = self

        # Length of subtype elements will be added by sub-type...

        return lengthInBits

    def staticParse(readBuffer: ReadBuffer, args) -> ModbusADU:
        positionAware: PositionAware = readBuffer
        if (args is None) or (args.length is not 2):
            raise PlcRuntimeException(
                "Wrong number of arguments, expected 2, but got " + args.length
            )

        driverType: DriverType = None
        if isinstance(args[0], DriverType):
            driverType = DriverType(args[0])
        elif isinstance(args[0], str):
            driverType = DriverType.valueOf(str(args[0]))
        else:
            raise PlcRuntimeException(
                "Argument 0 expected to be of type DriverType or a string which is parseable but was "
                + args[0].getClass().getName()
            )

        response: c_bool = None
        if isinstance(args[1], c_bool):
            response = c_bool(args[1])
        elif isinstance(args[1], str):
            response = c_bool.valueOf(str(args[1]))
        else:
            raise PlcRuntimeException(
                "Argument 1 expected to be of type c_bool or a string which is parseable but was "
                + args[1].getClass().getName()
            )

        return staticParse(readBuffer, driverType, response)

    @staticmethod
    def staticParseContext(
        readBuffer: ReadBuffer, driverType: DriverType, response: c_bool
    ) -> ModbusADU:
        readBuffer.pullContext("ModbusADU")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        # Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        builder: ModbusADUBuilder = None
        if EvaluationHelper.equals(driverType, DriverType.MODBUS_TCP):

            builder = ModbusTcpADU.staticParseBuilder(readBuffer, driverType, response)
        if EvaluationHelper.equals(driverType, DriverType.MODBUS_RTU):

            builder = ModbusRtuADU.staticParseBuilder(readBuffer, driverType, response)
        if EvaluationHelper.equals(driverType, DriverType.MODBUS_ASCII):

            builder = ModbusAsciiADU.staticParseBuilder(
                readBuffer, driverType, response
            )
        if builder is None:
            raise ParseException(
                "Unsupported case for discriminated type"
                + " parameters ["
                + "driverType="
                + driverType
                + "]"
            )

        readBuffer.closeContext("ModbusADU")
        # Create the instance
        _modbusADU: ModbusADU = builder.build(response)
        return _modbusADU

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusADU):
            return False

        that: ModbusADU = ModbusADU(o)
        return True

    def hashCode(self) -> int:
        return hash()

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


class ModbusADUBuilder:
    def build(self, response: c_bool) -> ModbusADU:
        pass
