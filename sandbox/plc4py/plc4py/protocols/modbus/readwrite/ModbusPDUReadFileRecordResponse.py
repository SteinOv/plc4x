#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUReadFileRecordResponse(PlcMessage,ModbusPDU):
            items: []ModbusPDUReadFileRecordResponseItem

    # Accessors for discriminator values.
    def c_bool getErrorFlag() {
        return (c_bool) false
    }
    def c_uint8 getFunctionFlag() {
        return (c_uint8) 0x14
    }
    def c_bool getResponse() {
        return (c_bool) true
    }


    def __post_init__(self):
super().__init__( )



    def getItems(self) -> []ModbusPDUReadFileRecordResponseItem:
        return items


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUReadFileRecordResponse")

                        # Implicit Field (byteCount) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
                        c_uint8 byteCount = (c_uint8) (ARRAY_SIZE_IN_BYTES(getItems()))
                        writeImplicitField("byteCount", byteCount, writeUnsignedShort(writeBuffer, 8))

                        # Array Field (items)
                        writeComplexTypeArrayField("items", items, writeBuffer)

            writeBuffer.popContext("ModbusPDUReadFileRecordResponse")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUReadFileRecordResponse = self

        # Implicit Field (byteCount)
        lengthInBits += 8

        # Array field
        if items is not None):
            for element in items:
                lengthInBits += element.getLengthInBits()



        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, c_bool response) -> ModbusPDUReadFileRecordResponseBuilder:
        readBuffer.pullContext("ModbusPDUReadFileRecordResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                byteCount: c_uint8 = readImplicitField("byteCount", readUnsignedShort(readBuffer, 8))

                            items: []ModbusPDUReadFileRecordResponseItem = readLengthArrayField("items", new DataReaderComplexDefault<>(() -> ModbusPDUReadFileRecordResponseItem.staticParse(readBuffer), readBuffer), byteCount)

    readBuffer.closeContext("ModbusPDUReadFileRecordResponse")
    # Create the instance
        return ModbusPDUReadFileRecordResponseBuilder(
            items
        
        )


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUReadFileRecordResponse):
            return False

        that: ModbusPDUReadFileRecordResponse = ModbusPDUReadFileRecordResponse(o)
        return
            (getItems() == that.getItems()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getItems()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"


class ModbusPDUReadFileRecordResponseBuilder(ModbusPDUModbusPDUBuilder: items: []ModbusPDUReadFileRecordResponseItemdef ModbusPDUReadFileRecordResponseBuilder( []ModbusPDUReadFileRecordResponseItem items ):        self.items = items


        def build(
        ) -> ModbusPDUReadFileRecordResponse:
        modbusPDUReadFileRecordResponse: ModbusPDUReadFileRecordResponse = ModbusPDUReadFileRecordResponse(
            items
)
        return modbusPDUReadFileRecordResponse


