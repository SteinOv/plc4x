#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
package modbus.readwrite;

import org.apache.plc4x.java.spi.generation.Message;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum ModbusDataType {

BOOL( (c_uint8) 1 , (c_uint8) 2 ) , BYTE( (c_uint8) 2 , (c_uint8) 2 ) , WORD( (c_uint8) 3 , (c_uint8) 2 ) , DWORD( (c_uint8) 4 , (c_uint8) 4 ) , LWORD( (c_uint8) 5 , (c_uint8) 8 ) , SINT( (c_uint8) 6 , (c_uint8) 2 ) , INT( (c_uint8) 7 , (c_uint8) 2 ) , DINT( (c_uint8) 8 , (c_uint8) 4 ) , LINT( (c_uint8) 9 , (c_uint8) 8 ) , USINT( (c_uint8) 10 , (c_uint8) 2 ) , UINT( (c_uint8) 11 , (c_uint8) 2 ) , UDINT( (c_uint8) 12 , (c_uint8) 4 ) , ULINT( (c_uint8) 13 , (c_uint8) 8 ) , REAL( (c_uint8) 14 , (c_uint8) 4 ) , LREAL( (c_uint8) 15 , (c_uint8) 8 ) , TIME( (c_uint8) 16 , (c_uint8) 8 ) , LTIME( (c_uint8) 17 , (c_uint8) 8 ) , DATE( (c_uint8) 18 , (c_uint8) 8 ) , LDATE( (c_uint8) 19 , (c_uint8) 8 ) , TIME_OF_DAY( (c_uint8) 20 , (c_uint8) 8 ) , LTIME_OF_DAY( (c_uint8) 21 , (c_uint8) 8 ) , DATE_AND_TIME( (c_uint8) 22 , (c_uint8) 8 ) , LDATE_AND_TIME( (c_uint8) 23 , (c_uint8) 8 ) , CHAR( (c_uint8) 24 , (c_uint8) 1 ) , WCHAR( (c_uint8) 25 , (c_uint8) 2 ) , STRING( (c_uint8) 26 , (c_uint8) 1 ) , WSTRING( (c_uint8) 27 , (c_uint8) 2 ) ;
    private static final Map<c_uint8, ModbusDataType> map;
    static {
        map = new HashMap<>();
        for (ModbusDataType value : ModbusDataType.values()) {
            map.put((c_uint8) value.getValue(), value);
        }
    }

    private c_uint8 value;
        private c_uint8 dataTypeSize;

    ModbusDataType(c_uint8 value, c_uint8 dataTypeSize) {
        this.value = value;
        this.dataTypeSize = dataTypeSize;
    }

    public c_uint8 getValue() {
        return value;
    }

    public c_uint8 getDataTypeSize() {
        return dataTypeSize;
    }

    public static ModbusDataType firstEnumForFieldDataTypeSize(c_uint8 fieldValue) {
        for (ModbusDataType _val : ModbusDataType.values()) {
            if(_val.getDataTypeSize() == fieldValue) {
                return _val;
            }
        }
        return null;
    }

    public static List<ModbusDataType> enumsForFieldDataTypeSize(c_uint8 fieldValue) {
        List<ModbusDataType> _values = new ArrayList();
        for (ModbusDataType _val : ModbusDataType.values()) {
            if(_val.getDataTypeSize() == fieldValue) {
                _values.add(_val);
            }
        }
        return _values;
    }

    public static ModbusDataType enumForValue(c_uint8 value) {
        return map.get(value);
    }

    public static Boolean isDefined(c_uint8 value) {
        return map.containsKey(value);
    }

}
