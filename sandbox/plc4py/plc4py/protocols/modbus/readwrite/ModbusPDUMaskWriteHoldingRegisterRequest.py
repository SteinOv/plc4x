#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass


from ctypes import c_bool
from ctypes import c_uint16
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
import math


@dataclass
class ModbusPDUMaskWriteHoldingRegisterRequest(PlcMessage, ModbusPDU):
    referenceAddress: c_uint16
    andMask: c_uint16
    orMask: c_uint16

    # Accessors for discriminator values.
    def getErrorFlag(self) -> c_bool:
        return c_bool(False)

    def getFunctionFlag(self) -> c_uint8:
        return c_uint8(0x16)

    def getResponse(self) -> c_bool:
        return c_bool(False)

    def __post_init__(self):
        super().__init__()

    def getReferenceAddress(self) -> c_uint16:
        return self.referenceAddress

    def getAndMask(self) -> c_uint16:
        return self.andMask

    def getOrMask(self) -> c_uint16:
        return self.orMask

    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUMaskWriteHoldingRegisterRequest")

        # Simple Field (referenceAddress)
        writeSimpleField(
            "referenceAddress", referenceAddress, writeUnsignedInt(writeBuffer, 16)
        )

        # Simple Field (andMask)
        writeSimpleField("andMask", andMask, writeUnsignedInt(writeBuffer, 16))

        # Simple Field (orMask)
        writeSimpleField("orMask", orMask, writeUnsignedInt(writeBuffer, 16))

        writeBuffer.popContext("ModbusPDUMaskWriteHoldingRegisterRequest")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUMaskWriteHoldingRegisterRequest = self

        # Simple field (referenceAddress)
        lengthInBits += 16

        # Simple field (andMask)
        lengthInBits += 16

        # Simple field (orMask)
        lengthInBits += 16

        return lengthInBits

    @staticmethod
    def staticParseBuilder(
        readBuffer: ReadBuffer, response: c_bool
    ) -> ModbusPDUMaskWriteHoldingRegisterRequestBuilder:
        readBuffer.pullContext("ModbusPDUMaskWriteHoldingRegisterRequest")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        referenceAddress: c_uint16 = readSimpleField(
            "referenceAddress", readUnsignedInt(readBuffer, 16)
        )

        andMask: c_uint16 = readSimpleField("andMask", readUnsignedInt(readBuffer, 16))

        orMask: c_uint16 = readSimpleField("orMask", readUnsignedInt(readBuffer, 16))

        readBuffer.closeContext("ModbusPDUMaskWriteHoldingRegisterRequest")
        # Create the instance
        return ModbusPDUMaskWriteHoldingRegisterRequestBuilder(
            referenceAddress, andMask, orMask
        )

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUMaskWriteHoldingRegisterRequest):
            return False

        that: ModbusPDUMaskWriteHoldingRegisterRequest = (
            ModbusPDUMaskWriteHoldingRegisterRequest(o)
        )
        return (
            (self.getReferenceAddress() == that.getReferenceAddress())
            and (self.getAndMask() == that.getAndMask())
            and (self.getOrMask() == that.getOrMask())
            and super().equals(that)
            and True
        )

    def hashCode(self) -> int:
        return hash(
            super().hashCode(),
            self.getReferenceAddress(),
            self.getAndMask(),
            self.getOrMask(),
        )

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


@dataclass
class ModbusPDUMaskWriteHoldingRegisterRequestBuilder(ModbusPDUModbusPDUBuilder):
    referenceAddress: c_uint16
    andMask: c_uint16
    orMask: c_uint16

    def __post_init__(self):
        pass

    def build(
        self,
    ) -> ModbusPDUMaskWriteHoldingRegisterRequest:
        modbusPDUMaskWriteHoldingRegisterRequest: ModbusPDUMaskWriteHoldingRegisterRequest = ModbusPDUMaskWriteHoldingRegisterRequest(
            self.referenceAddress, self.andMask, self.orMask
        )
        return modbusPDUMaskWriteHoldingRegisterRequest
