#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUWriteSingleCoilResponse(PlcMessage,ModbusPDU):
            address: c_uint16
            value: c_uint16

    # Accessors for discriminator values.
    def c_bool getErrorFlag() {
        return (c_bool) false
    }
    def c_uint8 getFunctionFlag() {
        return (c_uint8) 0x05
    }
    def c_bool getResponse() {
        return (c_bool) true
    }


    def __post_init__(self):
super().__init__( )



    def getAddress(self) -> c_uint16:
        return address

    def getValue(self) -> c_uint16:
        return value


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUWriteSingleCoilResponse")

                        # Simple Field (address)
                            writeSimpleField("address", address, writeUnsignedInt(writeBuffer, 16))

                        # Simple Field (value)
                            writeSimpleField("value", value, writeUnsignedInt(writeBuffer, 16))

            writeBuffer.popContext("ModbusPDUWriteSingleCoilResponse")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUWriteSingleCoilResponse = self

        # Simple field (address)
        lengthInBits += 16

        # Simple field (value)
        lengthInBits += 16

        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, c_bool response) -> ModbusPDUWriteSingleCoilResponseBuilder:
        readBuffer.pullContext("ModbusPDUWriteSingleCoilResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                address: c_uint16 = readSimpleField("address", readUnsignedInt(readBuffer, 16))

                value: c_uint16 = readSimpleField("value", readUnsignedInt(readBuffer, 16))

    readBuffer.closeContext("ModbusPDUWriteSingleCoilResponse")
    # Create the instance
        return ModbusPDUWriteSingleCoilResponseBuilder(
            address, 
            value
        
        )


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUWriteSingleCoilResponse):
            return False

        that: ModbusPDUWriteSingleCoilResponse = ModbusPDUWriteSingleCoilResponse(o)
        return
            (getAddress() == that.getAddress()) &&
            (getValue() == that.getValue()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getAddress(),
            getValue()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"


class ModbusPDUWriteSingleCoilResponseBuilder(ModbusPDUModbusPDUBuilder: address: c_uint16 value: c_uint16def ModbusPDUWriteSingleCoilResponseBuilder( c_uint16 address, c_uint16 value ):        self.address = address
        self.value = value


        def build(
        ) -> ModbusPDUWriteSingleCoilResponse:
        modbusPDUWriteSingleCoilResponse: ModbusPDUWriteSingleCoilResponse = ModbusPDUWriteSingleCoilResponse(
            address, 
            value
)
        return modbusPDUWriteSingleCoilResponse


