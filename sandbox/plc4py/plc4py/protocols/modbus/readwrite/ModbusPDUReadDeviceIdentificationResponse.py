#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass

from ctypes import c_bool
from ctypes import c_uint8
from plc4py.api.messages.PlcMessage import PlcMessage
from plc4py.protocols.modbus.readwrite.ModbusDeviceInformationConformityLevel import (
    ModbusDeviceInformationConformityLevel,
)
from plc4py.protocols.modbus.readwrite.ModbusDeviceInformationLevel import (
    ModbusDeviceInformationLevel,
)
from plc4py.protocols.modbus.readwrite.ModbusDeviceInformationMoreFollows import (
    ModbusDeviceInformationMoreFollows,
)
from plc4py.protocols.modbus.readwrite.ModbusDeviceInformationObject import (
    ModbusDeviceInformationObject,
)
from typing import List
import math


@dataclass
class ModbusPDUReadDeviceIdentificationResponse(PlcMessage, ModbusPDU):
    level: ModbusDeviceInformationLevel
    individualAccess: c_bool
    conformityLevel: ModbusDeviceInformationConformityLevel
    moreFollows: ModbusDeviceInformationMoreFollows
    nextObjectId: c_uint8
    objects: List[ModbusDeviceInformationObject]
    MEITYPE: c_uint8 = 0x0E

    # Accessors for discriminator values.
    def getErrorFlag(self) -> c_bool:
        return c_bool(False)

    def getFunctionFlag(self) -> c_uint8:
        return c_uint8(0x2B)

    def getResponse(self) -> c_bool:
        return c_bool(True)

    def __post_init__(self):
        super().__init__()

    def getLevel(self) -> ModbusDeviceInformationLevel:
        return self.level

    def getIndividualAccess(self) -> c_bool:
        return self.individualAccess

    def getConformityLevel(self) -> ModbusDeviceInformationConformityLevel:
        return self.conformityLevel

    def getMoreFollows(self) -> ModbusDeviceInformationMoreFollows:
        return self.moreFollows

    def getNextObjectId(self) -> c_uint8:
        return self.nextObjectId

    def getObjects(self) -> List[ModbusDeviceInformationObject]:
        return self.objects

    def getMeiType(self) -> c_uint8:
        return MEITYPE

    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
        startPos: int = positionAware.getPos()
        writeBuffer.pushContext("ModbusPDUReadDeviceIdentificationResponse")

        # Const Field (meiType)
        writeConstField("meiType", MEITYPE, writeUnsignedShort(writeBuffer, 8))

        # Simple Field (level)
        writeSimpleEnumField(
            "level",
            "ModbusDeviceInformationLevel",
            level,
            DataWriterEnumDefault(
                ModbusDeviceInformationLevel.getValue,
                ModbusDeviceInformationLevel.name,
                writeUnsignedShort(writeBuffer, 8),
            ),
        )

        # Simple Field (individualAccess)
        writeSimpleField(
            "individualAccess", individualAccess, writeBoolean(writeBuffer)
        )

        # Simple Field (conformityLevel)
        writeSimpleEnumField(
            "conformityLevel",
            "ModbusDeviceInformationConformityLevel",
            conformityLevel,
            DataWriterEnumDefault(
                ModbusDeviceInformationConformityLevel.getValue,
                ModbusDeviceInformationConformityLevel.name,
                writeUnsignedShort(writeBuffer, 7),
            ),
        )

        # Simple Field (moreFollows)
        writeSimpleEnumField(
            "moreFollows",
            "ModbusDeviceInformationMoreFollows",
            moreFollows,
            DataWriterEnumDefault(
                ModbusDeviceInformationMoreFollows.getValue,
                ModbusDeviceInformationMoreFollows.name,
                writeUnsignedShort(writeBuffer, 8),
            ),
        )

        # Simple Field (nextObjectId)
        writeSimpleField(
            "nextObjectId", nextObjectId, writeUnsignedShort(writeBuffer, 8)
        )

        # Implicit Field (numberOfObjects) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
        numberOfObjects: c_uint8 = c_uint8((COUNT(self.getObjects())))
        writeImplicitField(
            "numberOfObjects", numberOfObjects, writeUnsignedShort(writeBuffer, 8)
        )

        # Array Field (objects)
        writeComplexTypeArrayField("objects", objects, writeBuffer)

        writeBuffer.popContext("ModbusPDUReadDeviceIdentificationResponse")

    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(self.getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUReadDeviceIdentificationResponse = self

        # Const Field (meiType)
        lengthInBits += 8

        # Simple field (level)
        lengthInBits += 8

        # Simple field (individualAccess)
        lengthInBits += 1

        # Simple field (conformityLevel)
        lengthInBits += 7

        # Simple field (moreFollows)
        lengthInBits += 8

        # Simple field (nextObjectId)
        lengthInBits += 8

        # Implicit Field (numberOfObjects)
        lengthInBits += 8

        # Array field
        if self.objects is not None:
            i: int = 0
            for element in objects:
                last: boolean = ++i >= objects.size()
                lengthInBits += element.getLengthInBits()

        return lengthInBits

    @staticmethod
    def staticParseBuilder(
        readBuffer: ReadBuffer, response: c_bool
    ) -> ModbusPDUReadDeviceIdentificationResponseBuilder:
        readBuffer.pullContext("ModbusPDUReadDeviceIdentificationResponse")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

        meiType: c_uint8 = readConstField(
            "meiType",
            readUnsignedShort(readBuffer, 8),
            ModbusPDUReadDeviceIdentificationResponse.MEITYPE,
        )

        level: ModbusDeviceInformationLevel = readEnumField(
            "level",
            "ModbusDeviceInformationLevel",
            DataReaderEnumDefault(
                ModbusDeviceInformationLevel.enumForValue,
                readUnsignedShort(readBuffer, 8),
            ),
        )

        individualAccess: c_bool = readSimpleField(
            "individualAccess", readBoolean(readBuffer)
        )

        conformityLevel: ModbusDeviceInformationConformityLevel = readEnumField(
            "conformityLevel",
            "ModbusDeviceInformationConformityLevel",
            DataReaderEnumDefault(
                ModbusDeviceInformationConformityLevel.enumForValue,
                readUnsignedShort(readBuffer, 7),
            ),
        )

        moreFollows: ModbusDeviceInformationMoreFollows = readEnumField(
            "moreFollows",
            "ModbusDeviceInformationMoreFollows",
            DataReaderEnumDefault(
                ModbusDeviceInformationMoreFollows.enumForValue,
                readUnsignedShort(readBuffer, 8),
            ),
        )

        nextObjectId: c_uint8 = readSimpleField(
            "nextObjectId", readUnsignedShort(readBuffer, 8)
        )

        numberOfObjects: c_uint8 = readImplicitField(
            "numberOfObjects", readUnsignedShort(readBuffer, 8)
        )

        objects: List[ModbusDeviceInformationObject] = readCountArrayField(
            "objects",
            DataReaderComplexDefault(
                ModbusDeviceInformationObject.staticParse(readBuffer), readBuffer
            ),
            numberOfObjects,
        )

        readBuffer.closeContext("ModbusPDUReadDeviceIdentificationResponse")
        # Create the instance
        return ModbusPDUReadDeviceIdentificationResponseBuilder(
            level, individualAccess, conformityLevel, moreFollows, nextObjectId, objects
        )

    def equals(self, o: object) -> bool:
        if self == o:
            return True

        if not isinstance(o, ModbusPDUReadDeviceIdentificationResponse):
            return False

        that: ModbusPDUReadDeviceIdentificationResponse = (
            ModbusPDUReadDeviceIdentificationResponse(o)
        )
        return (
            (self.getLevel() == that.getLevel())
            and (self.getIndividualAccess() == that.getIndividualAccess())
            and (self.getConformityLevel() == that.getConformityLevel())
            and (self.getMoreFollows() == that.getMoreFollows())
            and (self.getNextObjectId() == that.getNextObjectId())
            and (self.getObjects() == that.getObjects())
            and super().equals(that)
            and True
        )

    def hashCode(self) -> int:
        return hash(
            super().hashCode(),
            self.getLevel(),
            self.getIndividualAccess(),
            self.getConformityLevel(),
            self.getMoreFollows(),
            self.getNextObjectId(),
            self.getObjects(),
        )

    def __str__(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(True, True)
        try:
            writeBufferBoxBased.writeSerializable(self)
        except SerializationException as e:
            raise RuntimeException(e)

        return "\n" + str(writeBufferBoxBased.getBox()) + "\n"


@dataclass
class ModbusPDUReadDeviceIdentificationResponseBuilder(ModbusPDUModbusPDUBuilder):
    level: ModbusDeviceInformationLevel
    individualAccess: c_bool
    conformityLevel: ModbusDeviceInformationConformityLevel
    moreFollows: ModbusDeviceInformationMoreFollows
    nextObjectId: c_uint8
    objects: List[ModbusDeviceInformationObject]

    def __post_init__(self):
        pass

    def build(
        self,
    ) -> ModbusPDUReadDeviceIdentificationResponse:
        modbusPDUReadDeviceIdentificationResponse: ModbusPDUReadDeviceIdentificationResponse = ModbusPDUReadDeviceIdentificationResponse(
            self.level,
            self.individualAccess,
            self.conformityLevel,
            self.moreFollows,
            self.nextObjectId,
            self.objects,
        )
        return modbusPDUReadDeviceIdentificationResponse
