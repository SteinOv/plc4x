#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusPDUDiagnosticRequest(PlcMessage,ModbusPDU):
            subFunction: int
            data: int

    # Accessors for discriminator values.
    def Boolean getErrorFlag() {
        return (boolean) false
    }
    def Short getFunctionFlag() {
        return (short) 0x08
    }
    def Boolean getResponse() {
        return (boolean) false
    }


    def __post_init__(self):
super().__init__( )



    def getSubFunction(self) -> int:
        return subFunction

    def getData(self) -> int:
        return data


    def serializeModbusPDUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusPDUDiagnosticRequest")

                        # Simple Field (subFunction)
                            writeSimpleField("subFunction", subFunction, writeUnsignedInt(writeBuffer, 16))

                        # Simple Field (data)
                            writeSimpleField("data", data, writeUnsignedInt(writeBuffer, 16))

            writeBuffer.popContext("ModbusPDUDiagnosticRequest")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusPDUDiagnosticRequest = self

        # Simple field (subFunction)
        lengthInBits += 16

        # Simple field (data)
        lengthInBits += 16

        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, Boolean response) -> ModbusPDUDiagnosticRequestBuilder:
        readBuffer.pullContext("ModbusPDUDiagnosticRequest")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                subFunction: int = readSimpleField("subFunction", readUnsignedInt(readBuffer, 16))

                data: int = readSimpleField("data", readUnsignedInt(readBuffer, 16))

    readBuffer.closeContext("ModbusPDUDiagnosticRequest")
    # Create the instance
        return ModbusPDUDiagnosticRequestBuilder(
            subFunction, 
            data
        
        )

        class ModbusPDUDiagnosticRequestBuilder(ModbusPDUModbusPDUBuilder {
        subFunction: int
        data: int

        def ModbusPDUDiagnosticRequestBuilder(
            int subFunction, 
            int data
        
        ):
            self.subFunction = subFunction
            self.data = data


        def build(
        ) -> ModbusPDUDiagnosticRequest:
            modbusPDUDiagnosticRequest: ModbusPDUDiagnosticRequest = ModbusPDUDiagnosticRequest(
                subFunction, 
                data
)
            return modbusPDUDiagnosticRequest


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusPDUDiagnosticRequest):
            return False

        that: ModbusPDUDiagnosticRequest = ModbusPDUDiagnosticRequest(o)
        return
            (getSubFunction() == that.getSubFunction()) &&
            (getData() == that.getData()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getSubFunction(),
            getData()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"

