#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License") you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Code generated by code-generation. DO NOT EDIT.
from abc import ABC, abstractmethod
from dataclasses import dataclass



@dataclass
class ModbusRtuADU(PlcMessage,ModbusADU):
            address: short
            pdu: ModbusPDU
        # Arguments.
            response: Boolean

    # Accessors for discriminator values.
    def DriverType getDriverType() {
        return DriverType.MODBUS_RTU
    }


    def __post_init__(self):
super().__init__( self.response )



    def getAddress(self) -> short:
        return address

    def getPdu(self) -> ModbusPDU:
        return pdu


    def serializeModbusADUChild(self, writeBuffer: WriteBuffer):
        positionAware: PositionAware = writeBuffer
            startPos: int = positionAware.getPos()
            writeBuffer.pushContext("ModbusRtuADU")

                        # Simple Field (address)
                            writeSimpleField("address", address, writeUnsignedShort(writeBuffer, 8), WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN))

                        # Simple Field (pdu)
                            writeSimpleField("pdu", pdu, new DataWriterComplexDefault<>(writeBuffer), WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN))

                        # Checksum Field (checksum) (Calculated)
                        writeChecksumField("crc", (int) (modbus.readwrite.utils.StaticHelper.rtuCrcCheck(address, pdu)), writeUnsignedInt(writeBuffer, 16))

            writeBuffer.popContext("ModbusRtuADU")


    def getLengthInBytes(self) -> int:
        return int(math.ceil(float(getLengthInBits() / 8.0)))

    def getLengthInBits(self) -> int:
        lengthInBits: int = super().getLengthInBits()
        _value: ModbusRtuADU = self

        # Simple field (address)
        lengthInBits += 8

        # Simple field (pdu)
        lengthInBits += pdu.getLengthInBits()

        # Checksum Field (checksum)
        lengthInBits += 16

        return lengthInBits


    def  staticParseBuilder(readBuffer: ReadBuffer, DriverType driverType, Boolean response) -> ModbusRtuADUBuilder:
        readBuffer.pullContext("ModbusRtuADU")
        positionAware: PositionAware = readBuffer
        startPos: int = positionAware.getPos()
        curPos: int = 0

                address: short = readSimpleField("address", readUnsignedShort(readBuffer, 8), WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN))

                pdu: ModbusPDU = readSimpleField("pdu", new DataReaderComplexDefault<>(() -> ModbusPDU.staticParse(readBuffer, (boolean) (response)), readBuffer), WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN))

                crc: int = readChecksumField("crc", readUnsignedInt(readBuffer, 16), (int) (modbus.readwrite.utils.StaticHelper.rtuCrcCheck(address, pdu)), WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN))

    readBuffer.closeContext("ModbusRtuADU")
    # Create the instance
        return ModbusRtuADUBuilder(
            address, 
            pdu
            , 
            response
        
        )

        class ModbusRtuADUBuilder(ModbusADUModbusADUBuilder {
        address: short
        pdu: ModbusPDU
        response: Boolean

        def ModbusRtuADUBuilder(
            short address, 
            ModbusPDU pdu
            , 
                Boolean response
        
        ):
            self.address = address
            self.pdu = pdu
            self.response = response


        def build(
            
                Boolean response
        ) -> ModbusRtuADU:
            modbusRtuADU: ModbusRtuADU = ModbusRtuADU(
                address, 
                pdu
            , 
                response
        )
            return modbusRtuADU


    def equals(self, o: object) -> bool:
        if this == o:
            return True

        if not (instanceof(o, ModbusRtuADU):
            return False

        that: ModbusRtuADU = ModbusRtuADU(o)
        return
            (getAddress() == that.getAddress()) &&
            (getPdu() == that.getPdu()) &&
            super().equals(that) &&
            True

    def hashCode(self) -> int:
        return Objects.hash(
            super().hashCode(),
            getAddress(),
            getPdu()
        )

    def toString(self) -> str:
        writeBufferBoxBased: WriteBufferBoxBased = WriteBufferBoxBased(true, true)
        try:
            writeBufferBoxBased.writeSerializable(this)
        except SerializationException:
            raise RuntimeException(e)

        return "\n" + writeBufferBoxBased.getBox().toString()+ "\n"

